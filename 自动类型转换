/* 不同数据类型的数据在进行运算时，C编译器会将其操作数转换成取值范围较大的操作数类型，成为类型提升。类型提升可以避免数据丢失情况的发生 */
#include<stdio.h>
main()
{
   int   n =2.6;
   float f = 3.6;
   double d=2.5;
   n=f;
   f=n;
   d=f;
   printf("%d\n",n);
   printf("%f\n",f);
   printf("%f\n",d);
}
/* 运行结果如下；
n=3
f=3.000000
d=3.000000
执行d第8行语句时，右侧实型表达式f的值自动转化成左侧n的整型变量的类型，这导致f的小数部分丢失。因为int只能接受f的整型部分，因此打印的是3，相当于对f取整，
执行第九行和第十行时，由于右侧的数据类型小于左侧类型，所以不存在数据丢失，只是改变了数据类型，不过也不会使精度有所增加，由于执行第八行使已经将n赋值为3，
所以无论是将其赋值给float或者是double型变量，打印的结果只是在小数点后面增加了六个零而已 */
